#ifndef HYPERTRACER_
#define HYPERTRACER_

#include <cstddef>
#include <filesystem>
#include <optional>
#include <span>
#include <string>
#include <string_view>
#include <variant>

struct HTCsvReader;
struct HTCsvWriter;
struct HTLogFile;
struct HTTracer;

namespace ht {

class CsvReader final {
public:
    CsvReader(const std::filesystem::path &path);
    ~CsvReader();

    void read_row(bool &eof);
    size_t num_columns() const;
    std::string_view column_name_by_index(size_t column) const;
    std::optional<size_t> column_index_by_name(std::string_view column) const;
    std::string_view value_by_column_index(size_t column) const;
    std::optional<std::string_view> value_by_column_name(std::string_view column) const;

private:
    HTCsvReader *reader;
    void *file;
};

class CsvWriter final {
public:
    CsvWriter(const std::filesystem::path &path, std::span<std::string_view> header);
    CsvWriter(const HTLogFile &log_file, std::span<std::string_view> header);
    ~CsvWriter();

    void set_string_by_column_index(size_t column, std::string &&value);
    void set_strview_by_column_index(size_t column, std::string_view value);
    void set_string_by_column_name(std::string_view column, std::string &&value);
    void set_strview_by_column_name(std::string_view column, std::string_view value);
    void write_row();

private:
    HTCsvWriter *writer;
    void *file;
};

class LogFile final {
public:
    LogFile(std::string_view prefix, unsigned num_retries = 10);
    ~LogFile();

private:
    HTLogFile *log_file;
};

class Tracer final {
public:
    Tracer(const std::filesystem::path &path, std::span<std::string_view> header, size_t buffer_num_rows = 4096);
    Tracer(const HTLogFile &log_file, std::span<std::string_view> header, size_t buffer_num_rows = 4096);
    ~Tracer();

    void write_row(std::span<std::variant<std::string_view, std::string>> columns);

private:
    HTTracer *tracer;
    void *file;
    void *line_buffer;
};

} // namespace ht

#endif
