#ifndef INCLUDE_HYPERTRACER_COW
#define INCLUDE_HYPERTRACER_COW

#include <string>
#include <string_view>
#include <utility>
#include <variant>

namespace ht {

class CowString final {
public:
    CowString(std::string &&value) noexcept :
        value(std::in_place_index<1>, std::forward<std::string>(value)) {
    }
    CowString(const std::string_view &value) noexcept :
        value(std::in_place_index<0>, value) {
    }

    CowString(const CowString &) = delete;
    CowString(CowString &&) = default;

    CowString &operator=(const CowString &) = delete;
    CowString &operator=(CowString &&) = default;

    CowString as_ref() const noexcept {
        return CowString(get());
    }
    CowString clone() const noexcept {
        switch (value.index()) {
        case 0:
            return CowString(std::get<0>(value));
        case 1:
            return CowString(std::string(std::get<1>(value)));
        }
        __builtin_unreachable();
    }

    std::string_view get() const noexcept {
        return std::visit([](const auto &value) { return std::string_view(value); }, value);
    }
    std::string_view operator*() const noexcept {
        return get();
    }

private:
    std::variant<std::string_view, std::string> value;
};

} // namespace ht

#endif
